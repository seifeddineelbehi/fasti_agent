import 'package:fasti_dashboard/core/components/common_text.dart';
import 'package:fasti_dashboard/core/components/custom_buttons.dart';
import 'package:fasti_dashboard/features/admin/trips/data/model/predicted_places_model.dart';
import 'package:fasti_dashboard/features/admin/trips/data/model/route_item_model.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';

class AddTripRouteFieldsWidget extends StatelessWidget {
  final List<RouteItemModel> routeItems;
  final Function(String, int) onFieldTap;
  final Function(String, String) onFieldChanged;
  final VoidCallback onAddStop;
  final VoidCallback confirm;
  final Function(String) onRemoveStop;
  final VoidCallback onSwapRouteAndDestination;
  final String? activeField;
  final List<PredictedPlacesModel> searchResults;
  final Function(PredictedPlacesModel)? onPlaceSelected;

  const AddTripRouteFieldsWidget({
    super.key,
    required this.routeItems,
    required this.onFieldTap,
    required this.onFieldChanged,
    required this.onAddStop,
    required this.confirm,
    required this.onRemoveStop,
    required this.onSwapRouteAndDestination,
    this.activeField,
    this.searchResults = const [],
    this.onPlaceSelected,
  });

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // Route Fields
        Container(
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(8.sp),
            border: Border.all(color: Colors.grey[300]!),
          ),
          child: Column(
            children: [
              // Build route fields
              for (int i = 0; i < routeItems.length; i++) ...[
                _buildRouteField(routeItems[i], i),
                if (i < routeItems.length - 1)
                  Container(
                    height: 1,
                    color: Colors.grey[200],
                  ),
              ],
            ],
          ),
        ),

        SizedBox(height: 12.sp),

        // Action buttons
        Row(
          children: [
            Expanded(
              child: CustomButtons.simpleButton(
                onPressed: onAddStop,
                text: "Add Stop",
              ),
            ),
            SizedBox(width: 8.sp),
            Expanded(
              child: CustomButtons.simpleButton(
                onPressed: onSwapRouteAndDestination,
                text: "Swap",
              ),
            ),
          ],
        ),
        SizedBox(height: 12.sp),
        CustomButtons.simpleButton(
          onPressed: onAddStop,
          text: "Confirm",
        ),
        // Search Results
        if (activeField != null && searchResults.isNotEmpty) ...[
          SizedBox(height: 12.sp),
          _buildSearchResults(),
        ],
      ],
    );
  }

  Widget _buildRouteField(RouteItemModel item, int index) {
    final isPickup = item.id == "pickup";
    final isDestination = item.id == "destination";
    final isStop = !isPickup && !isDestination;

    return Container(
      padding: EdgeInsets.all(16.sp),
      child: Row(
        children: [
          // Icon
          Container(
            width: 32.sp,
            height: 32.sp,
            decoration: BoxDecoration(
              color: isPickup
                  ? Colors.green[100]
                  : isDestination
                      ? Colors.red[100]
                      : Colors.orange[100],
              shape: BoxShape.circle,
            ),
            child: Icon(
              isPickup
                  ? Icons.radio_button_checked
                  : isDestination
                      ? Icons.location_on
                      : Icons.stop_circle,
              color: isPickup
                  ? Colors.green[600]
                  : isDestination
                      ? Colors.red[600]
                      : Colors.orange[600],
              size: 18.sp,
            ),
          ),
          SizedBox(width: 12.sp),

          // Text Field
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                CommonText.textBoldWeight500(
                  text: isPickup
                      ? "Pickup Location"
                      : isDestination
                          ? "Destination"
                          : "Stop",
                  fontSize: 12.sp,
                  color: Colors.grey[600]!,
                ),
                SizedBox(height: 4.sp),
                TextFormField(
                  controller: item.controller,
                  onTap: () => onFieldTap(item.id, index),
                  onChanged: (value) => onFieldChanged(item.id, value),
                  decoration: InputDecoration(
                    hintText: item.hint,
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(6.sp),
                      borderSide: BorderSide(color: Colors.grey[300]!),
                    ),
                    enabledBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(6.sp),
                      borderSide: BorderSide(color: Colors.grey[300]!),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(6.sp),
                      borderSide: BorderSide(color: Colors.blue[600]!),
                    ),
                    contentPadding: EdgeInsets.symmetric(
                      horizontal: 12.sp,
                      vertical: 8.sp,
                    ),
                    isDense: true,
                  ),
                ),
              ],
            ),
          ),

          // Remove button for stops
          if (isStop) ...[
            SizedBox(width: 8.sp),
            IconButton(
              onPressed: () => onRemoveStop(item.id),
              icon: Icon(
                Icons.close,
                color: Colors.red[600],
                size: 20.sp,
              ),
              padding: EdgeInsets.all(4.sp),
              constraints: BoxConstraints(
                minWidth: 32.sp,
                minHeight: 32.sp,
              ),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildSearchResults() {
    return Container(
      constraints: BoxConstraints(maxHeight: 200.h),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(8.sp),
        border: Border.all(color: Colors.grey[300]!),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 4,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Padding(
            padding: EdgeInsets.all(12.sp),
            child: CommonText.textBoldWeight600(
              text: "Search Results",
              fontSize: 14.sp,
              color: Colors.grey[700]!,
            ),
          ),
          Expanded(
            child: ListView.separated(
              itemCount: searchResults.length,
              separatorBuilder: (context, index) => Divider(
                height: 1,
                color: Colors.grey[200],
              ),
              itemBuilder: (context, index) {
                final place = searchResults[index];
                return ListTile(
                  leading: Container(
                    width: 32.sp,
                    height: 32.sp,
                    decoration: BoxDecoration(
                      color: Colors.blue[100],
                      shape: BoxShape.circle,
                    ),
                    child: Icon(
                      Icons.location_on,
                      color: Colors.blue[600],
                      size: 18.sp,
                    ),
                  ),
                  title: CommonText.textBoldWeight500(
                    text: place.mainText ?? "Unknown Location",
                    fontSize: 14.sp,
                    color: Colors.black,
                  ),
                  subtitle: place.secondaryText != null
                      ? CommonText.textBoldWeight400(
                          text: place.secondaryText!,
                          fontSize: 12.sp,
                          color: Colors.grey[600]!,
                        )
                      : null,
                  trailing: place.distanceInMeters != null
                      ? CommonText.textBoldWeight400(
                          text:
                              "${(place.distanceInMeters! / 1000).toStringAsFixed(1)} km",
                          fontSize: 11.sp,
                          color: Colors.grey[500]!,
                        )
                      : null,
                  onTap: () => onPlaceSelected?.call(place),
                  dense: true,
                  contentPadding: EdgeInsets.symmetric(
                    horizontal: 16.sp,
                    vertical: 4.sp,
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
